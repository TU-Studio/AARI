if (APPLE AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" OR WIN32)
    set(LIBTENSORFLOWLITE_VERSION "2.16.1")
else()
    set(LIBTENSORFLOWLITE_VERSION "2.17.0")
endif()

option(TENSORFLOWLITE_ROOTDIR "tensorflowlite root dir")
set(TENSORFLOWLITE_DIR_NAME "tensorflowlite-${LIBTENSORFLOWLITE_VERSION}")
set(TENSORFLOWLITE_ROOTDIR ${CMAKE_CURRENT_SOURCE_DIR}/modules/${TENSORFLOWLITE_DIR_NAME})

if(EXISTS ${TENSORFLOWLITE_ROOTDIR}/)
    message(STATUS "Tensorflow Lite library found at ${TENSORFLOWLITE_ROOTDIR}")
else()
    file(MAKE_DIRECTORY ${TENSORFLOWLITE_ROOTDIR}/)
    message(STATUS "Tensorflow Lite library not found - downloading pre-built library.")

    if(WIN32)
        set(LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME "tensorflowlite_c-${LIBTENSORFLOWLITE_VERSION}-Windows")
    endif()

    if(UNIX AND NOT APPLE)
        if (CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64")
            set(LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME "tensorflowlite_c-${LIBTENSORFLOWLITE_VERSION}-Linux-aarch64")
        elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
            set(LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME "tensorflowlite_c-${LIBTENSORFLOWLITE_VERSION}-Linux-x86_64")
        elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "armv7l")
            set(LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME "tensorflowlite_c-${LIBTENSORFLOWLITE_VERSION}-Linux-armv7l")
        endif()
    endif()

    if(UNIX AND APPLE)
        if (CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
            set(LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME "tensorflowlite_c-${LIBTENSORFLOWLITE_VERSION}-macOS-x86_64")
        elseif (CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
            set(LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME "tensorflowlite_c-${LIBTENSORFLOWLITE_VERSION}-macOS-arm64")
        endif()
    endif()

    set(LIBTENSORFLOWLITE_URL https://github.com/faressc/tflite-c-lib/releases/download/v${LIBTENSORFLOWLITE_VERSION}/${LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME}.zip)

    message(STATUS "Downloading ${LIBTENSORFLOWLITE_URL}")
    
    set(LIBTENSORFLOWLITE_PATH ${CMAKE_BINARY_DIR}/import/${LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME}.zip)

    file(DOWNLOAD ${LIBTENSORFLOWLITE_URL} ${LIBTENSORFLOWLITE_PATH} STATUS LIBTENSORFLOWLITE_DOWNLOAD_STATUS SHOW_PROGRESS)
    list(GET LIBTENSORFLOWLITE_DOWNLOAD_STATUS 0 LIBTENSORFLOWLITE_DOWNLOAD_STATUS_NO)

    file(ARCHIVE_EXTRACT
            INPUT ${LIBTENSORFLOWLITE_PATH}
            DESTINATION ${TENSORFLOWLITE_ROOTDIR}/)

    if(EXISTS ${TENSORFLOWLITE_ROOTDIR}/${LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME}/)
        file(COPY ${TENSORFLOWLITE_ROOTDIR}/${LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME}/ DESTINATION ${TENSORFLOWLITE_ROOTDIR}/)
        file(REMOVE_RECURSE ${TENSORFLOWLITE_ROOTDIR}/${LIB_TENSORFLOWLITE_PRE_BUILD_LIB_NAME})
    endif()

    if(LIBTENSORFLOWLITE_DOWNLOAD_STATUS_NO)
        message(STATUS "Pre-built library not downloaded. Error occurred, try again and check cmake/SetupTensorflowLite.cmake")
        file(REMOVE_RECURSE ${TENSORFLOWLITE_ROOTDIR})
        file(REMOVE ${LIBTENSORFLOWLITE_PATH})
    else()
        message(STATUS "Linking downloaded TensorflowLite pre-built library.")
    endif()
endif()

set(ANIRA_TENSORFLOWLITE_SHARED_LIB_PATH "${TENSORFLOWLITE_ROOTDIR}")

get_directory_property(hasParent PARENT_DIRECTORY)
if(hasParent)
    set(ANIRA_TENSORFLOWLITE_SHARED_LIB_PATH "${ANIRA_TENSORFLOWLITE_SHARED_LIB_PATH}" PARENT_SCOPE)
endif()

list(APPEND BACKEND_BUILD_HEADER_DIRS "${TENSORFLOWLITE_ROOTDIR}/include")
list(APPEND BACKEND_BUILD_LIBRARY_DIRS "${TENSORFLOWLITE_ROOTDIR}/lib")